<?xml version="1.0" encoding="iso-8859-1"?>
<acldoc acl_id="P04-3008">
	

	<s id="1">
		 Interactive grammar development with WCDG Kilian A. Foth Michael Daum Wolfgang Menzel Natural Language Systems Group Hamburg University D-22527 Hamburg Germany {foth,micha,menzel}@nats.informatik.uni-hamburg.de Abstract The manual design of grammars for accurate natural language analysis is an iterative process ; while modelling decisions usually determine parser behaviour , evidence from analysing more or different input can suggest unforeseen regularities , which leads to a reformulation of rules , or even to a different model of previously analysed phenomena . 
	</s>
	

	<s id="2">
		 We describe an implementation of Weighted Constraint Dependency Grammar that supports the grammar writer by providing display , automatic analysis , and diagnosis of dependency analyses and allows the direct exploration of alternative analyses and their status under the current grammar . 
	</s>
	

	<s id="3">
		 1 Introduction For parsing real-life natural language reliably , a grammar is required that covers most syntactic structures , but can also process input even if it contains phenomena that the grammar writer has not foreseen . 
	</s>
	

	<s id="4">
		 Two fundamentally different ways of reaching this goal have been employed various times . 
	</s>
	

	<s id="5">
		 One is to induce a probability model of the target language from a corpus of existing analyses and then compute the most probable structure for new input , i.e. the one that under some judiciously chosen measure is most similar to the previously seen structures . 
	</s>
	

	<s id="6">
		 The other way is to gather linguistically motivated general rules and write a parsing system that can only create structures adhering to these rules . 
	</s>
	

	<s id="7">
		 Where an automatically induced grammar requires large amounts of training material and the development focuses on global changes to the probability model , a handwritten grammar could in principle be developed without any corpus at all , but considerable effort is needed to find and formulate the individual rules . 
	</s>
	

	<s id="8">
		 If the formalism allows the ranking of grammar rules , their relative importance must also be determined . 
	</s>
	

	<s id="9">
		 This work is usually much more cyclical in character ; after grammar rules have been changed , intended and unforeseen consequences of the change must be checked , and further changes or entirely new rules are suggested by the results . 
	</s>
	

	<s id="10">
		 We present a tool that allows a grammar writer to develop and refine rules for natural language , parse new input , or annotate corpora , all in the same environment . 
	</s>
	

	<s id="11">
		 Particular support is available for interactive grammar development ; the effect of individual grammar rules is directly displayed , and the system explicitly explains its parsing decisions in terms of the rules written by the developer . 
	</s>
	

	<s id="12">
		 2 The WCDG parsing system The WCDG formalism ( Schr¨oder , 2002 ) describes natural language exclusively as dependency structure , i.e. ordered , labelled pairs of words in the input text . 
	</s>
	

	<s id="13">
		 It performs natural language analysis under the paradigm of constraint optimization , where the analysis that best conforms to all rules of the grammar is returned . 
	</s>
	

	<s id="14">
		 The rules are explicit descriptions of well-formed tree structures , allowing a modular and fine-grained description of grammatical knowledge . 
	</s>
	

	<s id="15">
		 For instance , rules in a grammar of English would state that subjects normally precede the finite verb and objects follow it , while temporal NP can either precede or follow it . 
	</s>
	

	<s id="16">
		 In general , these constraints are defeasible , since many rules about language are not absolute , but can be preempted by more important rules . 
	</s>
	

	<s id="17">
		 The strength of constraining information is controlled by the grammar writer : fundamental rules that must always hold , principles of different import that have to be weighed against each other , and general preferences that only take effect when no other disambiguating knowledge is available can all be formulated in a uniform way . 
	</s>
	

	<s id="18">
		 In some cases preferences can also be used for disambiguation by approximating information that is currently not available to the system ( e.g. knowledge on attachment preferences ) . 
	</s>
	

	<s id="19">
		 Even the very weak preferences have an influence on the parsing process ; apart from serving as tiebreakers for structures where little context is available ( e.g. with fragmentary input ) , they provide an Figure 1 : Display of a simplified feature hierarchy initial direction for the constraint optimization process even if they are eventually overruled . 
	</s>
	

	<s id="20">
		 As a consequence , even the best structure found usually incurs some minor constraint violations ; as long as the combined evidence of these default expectation failures is small , the structure can be regarded as perfectly grammatical . 
	</s>
	

	<s id="21">
		 The mechanism of constraint optimization simultaneously achieves robustness against extra- grammatical and ungrammatical input . 
	</s>
	

	<s id="22">
		 Therefore WCDG allows for broad-coverage parsing with high accuracy ; it is possible to write a grammar that is guaranteed to allow at least one structure for any kind of input , while still preferring compliant over deviant input wherever possible . 
	</s>
	

	<s id="23">
		 This graceful degradation under reduced input quality makes the formalism suitable for applications where deviant input is to be expected , e.g. second language learning . 
	</s>
	

	<s id="24">
		 In this case the potential for error diagnosis is also very valuable : if the best analysis that can be found still violates an important constraint , this directly indicates not only where an error occurred , but also what might be wrong about the input . 
	</s>
	

	<s id="25">
		 3 XCDG : A Tool for Parsing and Modelling An implementation of constraint dependency grammar exists that has the character of middleware to allow embedding the parsing functionality into other natural language applications . 
	</s>
	

	<s id="26">
		 The program XCDG uses this functionality for a graphical tool for grammar development . 
	</s>
	

	<s id="27">
		 In addition to providing an interface to a range of different parsing algorithms , graphical display of grammar elements and parsing results is possible ; for instance , the hierarchical relations between possible attributes of lexicon items can be shown . 
	</s>
	

	<s id="28">
		 See Figure 1 for an excerpt of the hierarchy of German syntactical categories used ; the terminals correspond to those used the Stuttgart-T¨ubingen Tagset of German 
		<ref citStr="Schiller et al. , 1999" id="1" label="OEPF" position="6421">
			( Schiller et al. , 1999 )
		</ref>
		 . 
	</s>
	

	<s id="29">
		 More importantly , mean and end results of pars- ing runs can be displayed graphically . 
	</s>
	

	<s id="30">
		 Dependency structures are represented as trees , while additional relations outside the syntax structure are shown as arcs below the tree ( see the referential relationship REF in Figure 2 ) . 
	</s>
	

	<s id="31">
		 As well as end results , intermediate structures found during parsing can be displayed . 
	</s>
	

	<s id="32">
		 This is often helpful in understanding the behaviour of the heuristic solution methods employed . 
	</s>
	

	<s id="33">
		 Together with the structural analysis , instances of broken rules are displayed below the dependency graph ( ordered by decreasing weights ) , and the dependencies that trigger the violation are highlighted on demand ( in our case the PP-modification between the preposition in and the infinite form verkaufen ) . 
	</s>
	

	<s id="34">
		 This allows the grammar writer to easily check whether or not a rule does in fact make the distinction it is supposed to make . 
	</s>
	

	<s id="35">
		 A unique identifier attached to each rule provides a link into the grammar source file containing all constraint definitions . 
	</s>
	

	<s id="36">
		 The unary constraint ’mod-Distan z’ in the example of Figure 2 is a fairly weak constraint which penalizes attachments the stronger the more distant a dependent is placed from its head . 
	</s>
	

	<s id="37">
		 Attaching the preposition to the preceding noun Bund would be preferred by this constraint , since the distance is shorter . 
	</s>
	

	<s id="38">
		 However , it would lead to a more serious constraint violation because noun attachments are generally dispreferred . 
	</s>
	

	<s id="39">
		 To facilitate such experimentation , the parse window doubles as a tree editor that allows structural , lexical and label changes to be made to an analysis by drag and drop . 
	</s>
	

	<s id="40">
		 One important application of the integrated parsing and editing tool is the creation of large-scale dependency treebanks . 
	</s>
	

	<s id="41">
		 With the ability to save and load parsing results from disk , automatically computed analyses can be checked and hand- corrected where necessary and then saved as annotations . 
	</s>
	

	<s id="42">
		 With a parser that achieves a high performance on unseen input , a throughput of over 100 annotations per hour has been achieved . 
	</s>
	

	<s id="43">
		 4 Grammar development with XCDG The development of a parsing grammar based on declarative constraints differs fundamentally from that of a derivational grammar , because its rules forbid structures instead of licensing them : while a context-free grammar without productions licenses nothing , a constraint grammar without constraints would allow everything . 
	</s>
	

	<s id="44">
		 A new constraint must therefore be written whenever two analyses of the same string are possible under the existing constraints , but human judgement clearly prefers one over the other . 
	</s>
	

	<s id="45">
		 Figure 2 : Xcdg Tree Editor Most often , new constraints are prompted by inspection of parsing results under the existing grammar : if an analysis is computed to be grammatical that clearly contradicts intuition , a rule must be missing from the grammar . 
	</s>
	

	<s id="46">
		 Conversely , if an error is signalled where human judgement disagrees , the relevant grammar rule must be wrong ( or in need of clarifying exceptions ) . 
	</s>
	

	<s id="47">
		 In this way , continuous improvement of an existing grammar is possible . 
	</s>
	

	<s id="48">
		 XCDG supports this development style through the feature of hypothetical evaluation . 
	</s>
	

	<s id="49">
		 The tree display window does not only show the result returned by the parser ; the structure , labels and lexical selections can be changed manually , forcing the parser to pretend that it returned a different analysis . 
	</s>
	

	<s id="50">
		 Recall that syntactic structures do not have to be specifically allowed by grammar rules ; therefore , every conceivable combination of subordinations , labels and lexical selections is admissible in principle , and can be processed by XCDG , although its score will be low if it contradicts many constraints . 
	</s>
	

	<s id="51">
		 After each such change to a parse tree , all con- straints are automatically re-evaluated and the updated grammar judgement is displayed . 
	</s>
	

	<s id="52">
		 In this way it can quickly be checked which of two alternative structures is preferred by the grammar . 
	</s>
	

	<s id="53">
		 This is useful in several ways . 
	</s>
	

	<s id="54">
		 First , when analysing parsing errors it allows the grammar author to distinguish search errors from modelling errors : if the intended structure is assigned a better score than the one actually returned by the parser , a search error occurred ( usually due to limited processing time ) ; but if the computed structure does carry the higher score , this indicates an error of judgement on the part of the grammar writer , and the grammar needs to be changed in some way if the phenomenon is to be modelled adequately . 
	</s>
	

	<s id="55">
		 If a modelling error does occur , it must be because a constraint that rules against the intended analysis has overruled those that should have selected it . 
	</s>
	

	<s id="56">
		 Since the display of broken constraints is ordered by severity , it is immediately obvious which of the grammar rules this is . 
	</s>
	

	<s id="57">
		 The developer can then decide whether to weaken that rule or extend it so that it makes an exception for the current phenomenon . 
	</s>
	

	<s id="58">
		 It is also possible that the intended analysis really does conflict with a particular linguistic principle , but in doing so follows a more important one ; in this case , this other rule must be found and strengthened so that it will overrule the first one . 
	</s>
	

	<s id="59">
		 The other rule can likewise be found by re-creating the original automatic analysis and see which of its constraint violations needs to be given more weight , or , alternatively , which entirely new rule must be added to the grammar . 
	</s>
	

	<s id="60">
		 In the decision whether to add a new rule to a constraint grammar , it must be discovered under what conditions a particular phenomenon occurs , so that a generally relevant rule can be written . 
	</s>
	

	<s id="61">
		 The possession of a large amount of analysed text is often useful here to verify decisions based on mere introspection . 
	</s>
	

	<s id="62">
		 Working together with an external program to search for specific structures in large treebanks , XCDG can display multiple sentences in stacked widgets and highlight all instances of the same phenomenon to help the grammar writer decide what the relevant conditions are . 
	</s>
	

	<s id="63">
		 Using this tool , a comprehensive grammar of modern German has been constructed 
		<ref citStr="Foth , 2004" id="2" label="CEPF" position="12852">
			( Foth , 2004 )
		</ref>
		 that employs 750 handwritten well-formedness rules , and has been used to annotate around 25,000 sentences with dependency structure . 
	</s>
	

	<s id="64">
		 It achieves a structural recall of 87.7 % on sentences from the NEGRA corpus ( Foth et al. , submitted ) , but can be applied to texts of many other types , where structural recall varies between 80–90 % . 
	</s>
	

	<s id="65">
		 To our knowledge , no other system has been published that achieves a comparable correctness for open-domain German text . 
	</s>
	

	<s id="66">
		 Parsing time is rather high due to the computational effort of multidimensional optimization ; processing time is usually measured in seconds rather than milliseconds for each sentence . 
	</s>
	

	<s id="67">
		 5 Conclusions We demonstrate a tool that lets the user parse , display and manipulate dependency structures according to a variant of dependency grammar in a graphical environment . 
	</s>
	

	<s id="68">
		 We have found such an integrated environment invaluable for the development of precise and large grammars of natural language . 
	</s>
	

	<s id="69">
		 Compared to other approaches , c.f. 
		<ref citStr="Kaplan and Maxwell , 1996" id="3" label="CJPN" position="13934">
			( Kaplan and Maxwell , 1996 )
		</ref>
		 , the built-in WCDG parser provides a much better feedback by pinpointing possible reasons for the current grammar being unable to produce the desired parsing result . 
	</s>
	

	<s id="70">
		 This additional information can then be immediately used in subsequent development cycles . 
	</s>
	

	<s id="71">
		 A similar tool , called Annotate , has been de- scribed in 
		<ref citStr="Brants and Plaehn , 2000" id="4" label="OJPN" position="14300">
			( Brants and Plaehn , 2000 )
		</ref>
		 . 
	</s>
	

	<s id="72">
		 This tool facilitates syntactic corpus annotation in a semiautomatic way by using a part-of-speech tagger and a parser running in the background . 
	</s>
	

	<s id="73">
		 In comparison , Annotate is primarily used for corpus annotation , whereas XCDG supports the development of the parser itself also . 
	</s>
	

	<s id="74">
		 Due to its ability to always compute the single best analysis of a sentence and to highlight possible shortcomings of the grammar , the XCDG system provides a useful framework in which human design decisions on rules and weights can be effectively combined with a corpus-driven evaluation of their consequences . 
	</s>
	

	<s id="75">
		 An alternative for a symbiotic cooperation in grammar development has been devised by 
		<ref citStr="Hockenmaier and Steedman , 2002" id="5" label="CJPN" position="15053">
			( Hockenmaier and Steedman , 2002 )
		</ref>
		 , where a skeleton of fairly general rule schemata is instantiated and weighed by means of a treebank annotation . 
	</s>
	

	<s id="76">
		 Although the resulting grammar produced highly competitive results , it nevertheless requires a treebank being given in advance , while our approach also supports a simultaneous treebank compilation . 
	</s>
	

	<s id="77">
		 References Thorsten Brants and Oliver Plaehn . 
	</s>
	

	<s id="78">
		 2000. Interactive corpus annotation . 
	</s>
	

	<s id="79">
		 In Proc . 
	</s>
	

	<s id="80">
		 2nd Int. Conf . 
	</s>
	

	<s id="81">
		 on Language Resources and Engineering , LREC 2000 , pages 453–459 , Athens . 
	</s>
	

	<s id="82">
		 Kilian Foth , Michael Daum , and Wolfgang Menzel . 
	</s>
	

	<s id="83">
		 submitted . 
	</s>
	

	<s id="84">
		 A broad-coverage parser for German based on defeasible constraints . 
	</s>
	

	<s id="85">
		 In Proc . 
	</s>
	

	<s id="86">
		 7. Konferenz zur Verarbeitung nat¨urlicher Sprache , KONVENS-2004 , Wien , Austria . 
	</s>
	

	<s id="87">
		 Kilian A. Foth . 
	</s>
	

	<s id="88">
		 2004. Writing weighted constraints for large dependency grammars . 
	</s>
	

	<s id="89">
		 In Proc . 
	</s>
	

	<s id="90">
		 Recent Advances in Dependency Grammars , COLING 2004 , Geneva , Switzerland . 
	</s>
	

	<s id="91">
		 Julia Hockenmaier and Mark Steedman . 
	</s>
	

	<s id="92">
		 2002. Generative models for statistical parsing with combinatory categorial grammar . 
	</s>
	

	<s id="93">
		 In Proc . 
	</s>
	

	<s id="94">
		 40th Annual Meeting of the ACL , ACL-2002 , Philadelphia , PA . 
	</s>
	

	<s id="95">
		 Ronald M. Kaplan and John T. Maxwell . 
	</s>
	

	<s id="96">
		 1996. LFG grammar writer’s workbench . 
	</s>
	

	<s id="97">
		 Technical report , Xerox PARC . 
	</s>
	

	<s id="98">
		 Anne Schiller , Simone Teufel , Christine St¨ockert , and Christine Thielen . 
	</s>
	

	<s id="99">
		 1999. Guidelines f¨ur das Tagging deutscher Textcorpora . 
	</s>
	

	<s id="100">
		 Technical report , Universit¨at Stuttgart / Universit¨at T¨ubingen . 
	</s>
	

	<s id="101">
		 Ingo Schr¨oder . 
	</s>
	

	<s id="102">
		 2002. Natural Language Parsing with Graded Constraints . 
	</s>
	

	<s id="103">
		 Ph.D . 
	</s>
	

	<s id="104">
		 thesis , Department of Informatics , Hamburg University , Hamburg , Germany . 
	</s>
	


</acldoc>
