<?xml version="1.0" encoding="iso-8859-1"?>
<acldoc acl_id="P04-1005">
	

	<s id="1">
		 A TAG-based noisy channel model of speech repairs Mark Johnson Eugene Charniak Brown University Brown University Providence , RI 02912 Providence , RI 02912 mj@cs.brown.edu ec@cs.brown.edu Abstract This paper describes a noisy channel model of speech repairs , which can identify and correct repairs in speech transcripts . 
	</s>
	

	<s id="2">
		 A syntactic parser is used as the source model , and a novel type of TAG-based transducer is the channel model . 
	</s>
	

	<s id="3">
		 The use of TAG is motivated by the intuition that the reparandum is a “rough copy” of the repair . 
	</s>
	

	<s id="4">
		 The model is trained and tested on the Switchboard disfluency-annotated corpus . 
	</s>
	

	<s id="5">
		 1 Introduction Most spontaneous speech contains disfluencies such as partial words , filled pauses ( e.g. , “uh” , “um” , “huh” ) , explicit editing terms ( e.g. , “I mean” ) , parenthetical asides and repairs . 
	</s>
	

	<s id="6">
		 Of these repairs pose particularly difficult problems for parsing and related NLP tasks . 
	</s>
	

	<s id="7">
		 This paper presents an explicit generative model of speech repairs and shows how it can eliminate this kind of disfluency . 
	</s>
	

	<s id="8">
		 While speech repairs have been studied by psycholinguists for some time , as far as we know this is the first time a probabilistic model of speech repairs based on a model of syntactic structure has been described in the literature . 
	</s>
	

	<s id="9">
		 Probabilistic models have the advantage over other kinds of models that they can in principle be integrated with other probabilistic models to produce a combined model that uses all available evidence to select the globally optimal analysis . 
	</s>
	

	<s id="10">
		 
		<ref citStr="Shriberg and Stolcke ( 1998 )" id="1" label="CEPF" position="1645">
			Shriberg and Stolcke ( 1998 )
		</ref>
		 studied the location and distribution of repairs in the Switchboard corpus , but did not propose an actual model of repairs . 
	</s>
	

	<s id="11">
		 
		<ref citStr="Heeman and Allen ( 1999 )" id="2" label="CEPF" position="1806">
			Heeman and Allen ( 1999 )
		</ref>
		 describe a noisy channel model of speech repairs , but leave “extending the model to incorporate higher level syntactic ... processing” to future work . 
	</s>
	

	<s id="12">
		 The previous work most closely related to the current work is 
		<ref citStr="Charniak and Johnson ( 2001 )" id="3" label="CEPF" position="2062">
			Charniak and Johnson ( 2001 )
		</ref>
		 , who used a boosted decision stub classifier to classify words as edited or not on a word by word basis , but do not identify or assign a probability to a repair as a whole . 
	</s>
	

	<s id="13">
		 There are two innovations in this paper . 
	</s>
	

	<s id="14">
		 First , we demonstrate that using a syntactic parser-based language model 
		<ref citStr="Charniak ( 2001 )" id="4" label="CEPF" position="2390">
			Charniak ( 2001 )
		</ref>
		 instead of bi/trigram language models significantly improves the accuracy of repair detection and correction . 
	</s>
	

	<s id="15">
		 Second , we show how Tree Adjoining Grammars ( TAGs ) can be used to provide a precise formal description and probabilistic model of the crossed dependencies occurring in speech repairs . 
	</s>
	

	<s id="16">
		 The rest of this paper is structured as follows . 
	</s>
	

	<s id="17">
		 The next section describes the noisy channel model of speech repairs and the section after that explains how it can be applied to detect and repair speech repairs . 
	</s>
	

	<s id="18">
		 Section 4 evaluates this model on the Penn 3 disfluency-tagged Switchboard corpus , and section 5 concludes and discusses future work . 
	</s>
	

	<s id="19">
		 2 A noisy channel model of repairs We follow 
		<ref citStr="Shriberg ( 1994 )" id="5" label="CERF" position="3148">
			Shriberg ( 1994 )
		</ref>
		 and most other work on speech repairs by dividing a repair into three parts : the reparandum ( the material repaired ) , the interregnum that is typically either empty or consists of a filler , and the repair . 
	</s>
	

	<s id="20">
		 Figure 1 shows these three parts for a typical repair . 
	</s>
	

	<s id="21">
		 Most current probabilistic language models are based on HMMs or PCFGs , which induce linear or tree-structured dependencies between words . 
	</s>
	

	<s id="22">
		 The relationship between reparandum and repair seems to be quite different : the repair is a “rough copy” of the reparandum , often incorporating the same or very similar words in roughly the same word order . 
	</s>
	

	<s id="23">
		 That is , they seem to involve “crossed” dependencies between the reparandum and the repair , shown in Figure 1. Languages with an unbounded number of crossed dependencies cannot be described by a context-free or finite- state grammar , and crossed dependencies like these have been used to argue natural languages ... a flight to Boston , uh , I mean , to Denver on Friday ... ~N11 J ~N11 J ~N11 J Reparandum Interregnum Repair Figure 1 : The structure of a typical repair , with crossing dependencies between reparandum and repair . 
	</s>
	

	<s id="24">
		 Figure 2 : The “helical” dependency structure induced by the generative model of speech repairs for the repair depicted in Figure 1. a flight to Denver on Friday to Boston are not context-free 
		<ref citStr="Shieber ( 1985 )" id="6" label="CEPF" position="4561">
			Shieber ( 1985 )
		</ref>
		 . 
	</s>
	

	<s id="25">
		 Mildly context-sensitive grammars , such as Tree Adjoining Grammars ( TAGs ) and Combinatory Categorial Grammars , can describe such crossing dependencies , and that is why TAGs are used here . 
	</s>
	

	<s id="26">
		 Figure 2 shows the combined model’s dependency structure for the repair of Figure 1 . 
	</s>
	

	<s id="27">
		 Interestingly , if we trace the temporal word string through this dependency structure , aligning words next to the words they are dependent on , we obtain a “helical” type of structure familiar from genome models , and in fact TAGs are being used to model genomes for very similar reasons . 
	</s>
	

	<s id="28">
		 The noisy channel model described here involves two components . 
	</s>
	

	<s id="29">
		 A language model defines a probability distribution P(X) over the source sentences X , which do not contain repairs . 
	</s>
	

	<s id="30">
		 The channel model defines a conditional probability distribution P(YIX) of surface sentences Y , which may contain repairs , given source sentences . 
	</s>
	

	<s id="31">
		 In the work reported here , X is a word string and Y is a speech transcription not containing punctuation or partial words . 
	</s>
	

	<s id="32">
		 We use two language models here : a bigram language model , which is used in the search process , and a syntactic parser-based language model 
		<ref citStr="Charniak ( 2001 )" id="7" label="CERF" position="5828">
			Charniak ( 2001 )
		</ref>
		 , which is used to rescore a set of the most likely analysis obtained using the bigram model . 
	</s>
	

	<s id="33">
		 Because the language model is responsible for generating the well-formed sentence X , it is reasonable to expect that a language model that can model more global properties of sentences will lead to better performance , and the results presented here show that this is the case . 
	</s>
	

	<s id="34">
		 The channel model is a stochastic TAG-based transducer ; it is responsible for generating the repairs in the transcript Y , and it uses the ability of TAGs to straightforwardly model crossed dependencies . 
	</s>
	

	<s id="35">
		 2.1 Informal description Given an observed sentence Y we wish to find the most likely source sentence ~X , where : X~ = argmax P(XIY) = argmaxP(YIX)P(Y) . 
	</s>
	

	<s id="36">
		 X X This is the same general setup that is used in statistical speech recognition and machine translation , and in these applications syntax- based language models P(Y) yield state-of-the- art performance , so we use one such model here . 
	</s>
	

	<s id="37">
		 The channel model P(YIX) generates sentences Y given a source X . 
	</s>
	

	<s id="38">
		 A repair can potentially begin before any word of X . 
	</s>
	

	<s id="39">
		 When a repair has begun , the channel model incrementally processes the succeeding words from the start of the repair . 
	</s>
	

	<s id="40">
		 Before each succeeding word either the repair can end or else a sequence of words can be inserted in the reparandum . 
	</s>
	

	<s id="41">
		 At the end of each repair , a ( possibly null ) interregnum is appended to the reparandum . 
	</s>
	

	<s id="42">
		 The intuition motivating the channel model design is that the words inserted into the reparandum are very closely related those in the repair . 
	</s>
	

	<s id="43">
		 Indeed , in our training data over 60 % of the words in the reparandum are exact copies of words in the repair ; this similarity is strong evidence of a repair . 
	</s>
	

	<s id="44">
		 The channel model is designed so that exact copy reparandum words will have high probability . 
	</s>
	

	<s id="45">
		 We assume that X is a substring of Y , i.e. , that the source sentence can be obtained by deleting words from Y , so for a fixed observed sentence there are only a finite number of possible source sentences . 
	</s>
	

	<s id="46">
		 However , the number of source sentences grows exponentially with the length of Y , so exhaustive search is probably infeasible . 
	</s>
	

	<s id="47">
		 TAGs provide a systematic way of formalizing the channel model , and their polynomial- time dynamic programming parsing algorithms can be used to search for likely repairs , at least when used with simple language models like a bigram language model . 
	</s>
	

	<s id="48">
		 In this paper we first identify the 20 most likely analysis of each sentence using the TAG channel model together with a bigram language model . 
	</s>
	

	<s id="49">
		 Then each of these analysis is rescored using the TAG channel model and a syntactic parser based language model . 
	</s>
	

	<s id="50">
		 The TAG channel model’s analysis do not reflect the syntactic structure of the sentence being analyzed ; instead they encode the crossed dependencies of the speech repairs . 
	</s>
	

	<s id="51">
		 If we want to use TAG dynamic programming algorithms to efficiently search for repairs , it is necessary that the intersection ( in language terms ) of the TAG channel model and the language model itself be describable by a TAG . 
	</s>
	

	<s id="52">
		 One way to guarantee this is to use a finite state language model ; this motivates our use of a bigram language model . 
	</s>
	

	<s id="53">
		 On the other hand , it seems desirable to use a language model that is sensitive to more global properties of the sentence , and we do this by reranking the initial analysis , replacing the bigram language model with a syntactic parser based model . 
	</s>
	

	<s id="54">
		 We do not need to intersect this parser based language model with our TAG channel model since we evaluate each analysis separately . 
	</s>
	

	<s id="55">
		 2.2 The TAG channel model The TAG channel model defines a stochastic mapping of source sentences X into observed sentences Y . 
	</s>
	

	<s id="56">
		 There are several ways to define transducers using TAGs such as 
		<ref citStr="Shieber and Schabes ( 1990 )" id="8" label="CEPF" position="9848">
			Shieber and Schabes ( 1990 )
		</ref>
		 , but the following simple method , inspired by finite-state transducers , suffices for the application here . 
	</s>
	

	<s id="57">
		 The TAG defines a language whose vocabulary is the set of pairs ( U{0} ) x ( U{0} ) , where E is the vocabulary of the observed sentences Y . 
	</s>
	

	<s id="58">
		 A string Z in this language can be interpreted as a pair of strings ( Y , X ) , where Y is the concatenation of the projection of the first components of Z and X is the concatenation of the projection of the second components . 
	</s>
	

	<s id="59">
		 For example , the string Z = a : a flight:flight to:0 Boston:0 uh:0 I:0 mean:0 to:to Denver:Denver on:on Friday:Friday corresponds to the observed string Y = a flight to Boston uh I mean to Denver on Friday and the source string X = a flight to Denver on Friday . 
	</s>
	

	<s id="60">
		 Figure 3 shows the TAG rules used to generate this example . 
	</s>
	

	<s id="61">
		 The nonterminals in this grammar are of the form N , , ,. , R,,,„ : , , , . 
	</s>
	

	<s id="62">
		 and I , where w , , is a word appearing in the source string and wy is a word appearing in the ob- served string . 
	</s>
	

	<s id="63">
		 Informally , the N , , , . 
	</s>
	

	<s id="64">
		 nonterminals indicate that the preceding word w , , was an- alyzed as not being part of a repair , while the R,,,„:,,,.that the preceding words wy and w , , were part of a repair . 
	</s>
	

	<s id="65">
		 The nonterminal I generates words in the interregnum of a repair . 
	</s>
	

	<s id="66">
		 Encoding the preceding words in the TAGs nonterminals permits the channel model to be sensitive to lexical properties of the preceding words . 
	</s>
	

	<s id="67">
		 The start symbol is N $ , where ` $ ’ is a distinguished symbol used to indicate the beginning and end of sentences . 
	</s>
	

	<s id="68">
		 2.3 Estimating the repair channel model from data The model is trained from the disfluency and POS tagged Switchboard corpus on the LDC Penn tree bank III CD-ROM ( specifically , the files under dysfl/dps/swbd ) . 
	</s>
	

	<s id="69">
		 This version of the corpus annotates the beginning and ending positions of repairs as well as fillers , editing terms , asides , etc. , which might serve as the interregnum in a repair . 
	</s>
	

	<s id="70">
		 The corpus also includes punctuation and partial words , which are ignored in both training and evaluation here since we felt that in realistic applications these would not be available in speech recognizer output . 
	</s>
	

	<s id="71">
		 The transcript of the example of Figure 1 would look something like the following : a/DT flight/NN [ to/IN Boston/NNP + { F uh/UH } { E I/PRP mean/VBP } to/IN Denver/NNP ] on/IN Friday/NNP In this transcription the repair is the string from the opening bracket “[” to the interruption point “+” ; the interregnum is the sequence of braced strings following the interregnum , and the repair is the string that begins at the end of the interregnum and ends at the closing bracket “ ] ” . 
	</s>
	

	<s id="72">
		 The interregnum consists of the braced to:to Friday:Friday NFriday ( a1 ) Nwant a:a Nab 1 — Pn(repairla) ( a2 ) Na flight:flight Rflight:flight Ij Pn(repairl flight ) ( a3 ) NDenver on : on Non 1 1— Pn(repairlon) ( a5 ) I uh I I mean PZ ( uh I mean ) ( 01 ) Rflight:flight to:0 Rto:to R* ` flight:flight to:to Pr ( copy lflight , flight ) ( 02 ) Rto:to Boston:0 RBoston:Denver R*Denver:Denver ' to:to Pr(substlto , to)Pr(Bostonlsubst , to , Denver ) ( 03 ) RBoston:Denver R* Boston:Denver NDenver j Pr(nonrepl Boston , Denver ) R*Boston,Denver tomorrow : tomorrow Pr ( del lBoston , Denver ) Nwant a : a Na R* Boston,Denver Pr ( i ns l Boston , Denver ) Pr ( tomorrow l ins , Boston , Denver ) flight:flight Rflight:flight to:0 Rto:to Boston:0 RBoston:Denver RBoston:Denver Denver:Denver on:on Non . 
	</s>
	

	<s id="73">
		 . 
	</s>
	

	<s id="74">
		 . 
	</s>
	

	<s id="75">
		 NDenver Rto:to Rflight:flight I uh:0 I I:0 mean:0 Figure 3 : The TAG rules used to generate the example shown in Figure 1 and their respective weights , and the corresponding derivation and derived trees . 
	</s>
	

	<s id="76">
		 expressions immediately following the interruption point . 
	</s>
	

	<s id="77">
		 We used the disfluency tagged version of the corpus for training rather than the parsed version because the parsed version does not mark the interregnum , but we need this information for training our repair channel model . 
	</s>
	

	<s id="78">
		 Testing was performed using data from the parsed version since this data is cleaner , and ( 04 ) RBoston,Denver RBoston,tomorrow ( 05 ) RBoston,Denver tomorrow:0 Rtomorrow,Denver . 
	</s>
	

	<s id="79">
		 . 
	</s>
	

	<s id="80">
		 . 
	</s>
	

	<s id="81">
		 a1 a2 a5 01 02 03 a3 a4 . 
	</s>
	

	<s id="82">
		 . 
	</s>
	

	<s id="83">
		 . 
	</s>
	

	<s id="84">
		 it enables a direct comparison with earlier work . 
	</s>
	

	<s id="85">
		 We followed 
		<ref citStr="Charniak and Johnson ( 2001 )" id="9" label="CERF" position="14357">
			Charniak and Johnson ( 2001 )
		</ref>
		 and split the corpus into main training data , held- out training data and test data as follows : main training consisted of all sw[23]*.dps files , held- out training consisted of all sw4[5-9]*.dps files and test consisted of all sw4[0-1]*.mrg files . 
	</s>
	

	<s id="86">
		 We now describe how the weights on the TAG productions described in subsection 2.2 are estimated from this training data . 
	</s>
	

	<s id="87">
		 In order to estimate these weights we need to know the TAG derivation of each sentence in the training data . 
	</s>
	

	<s id="88">
		 In order to uniquely determine this we need the not just the locations of each reparandum , interregnum and repair ( which are annotated in the corpus ) but also the crossing dependencies between the reparandum and repair words , as indicated in Figure 1 . 
	</s>
	

	<s id="89">
		 We obtain these by aligning the reparandum and repair strings of each repair using a minimum-edit distance string aligner with the following alignment costs : aligning identical words costs 0 , aligning words with the same POS tag costs 2 , an insertion or a deletion costs 4 , aligning words with POS tags that begin with the same letter costs 5 , and an arbitrary substitution costs 7 . 
	</s>
	

	<s id="90">
		 These costs were chosen so that a substitution will be selected over an insertion followed by a deletion , and the lower cost for substitutions involving POS tags beginning with the same letter is a rough and easy way of establishing a preference for aligning words whose POS tags come from the same broad class , e.g. , it results in aligning singular and plural nouns , present and past participles , etc. . 
	</s>
	

	<s id="91">
		 While we did not evaluate the quality of the alignments since they are not in themselves the object of this exercise , they seem to be fairly good . 
	</s>
	

	<s id="92">
		 From our training data we estimate a number of conditional probability distributions . 
	</s>
	

	<s id="93">
		 These estimated probability distributions are the linear interpolation of the corresponding empirical distributions from the main sub-corpus using various subsets of conditioning variables ( e.g. , bigram models are mixed with unigram models , etc. ) using Chen’s bucketing scheme 
		<ref citStr="Chen and Goodman ( 1998 )" id="10" label="CEPF" position="16515">
			Chen and Goodman ( 1998 )
		</ref>
		 . 
	</s>
	

	<s id="94">
		 As is commonly done in language modelling , the interpolation coefficients are determined by maximizing the likelihood of the held out data counts using EM . 
	</s>
	

	<s id="95">
		 Special care was taken to ensure that all distributions over words ranged over ( and assigned non-zero probability to ) every word that occurred in the train ing corpora ; this turns out to be important as the size of the training data for the different distributions varies greatly . 
	</s>
	

	<s id="96">
		 The first distribution is defined over the words in source sentences ( i.e. , that do not contain reparandums or interregnums ) . 
	</s>
	

	<s id="97">
		 P,,,(repairlW) is the probability of a repair beginning after a word W in the source sentence X ; it is estimated from the training sentences with reparandums and interregnums removed . 
	</s>
	

	<s id="98">
		 Here and in what follows , W ranges over E U 1$1 , where ` $ ’ is a distinguished beginning-ofsentence marker . 
	</s>
	

	<s id="99">
		 For example , P , , , ( repair lflight ) is the probability of a repair beginning after the word flight . 
	</s>
	

	<s id="100">
		 Note that repairs are relatively rare ; in our training data P,,,(repair) Pz~ 0.02 , which is a fairly strong bias against repairs . 
	</s>
	

	<s id="101">
		 The other distributions are defined over aligned reparandum/repair strings , and are estimated from the aligned repairs extracted from the training data . 
	</s>
	

	<s id="102">
		 In training we ignored all overlapping repairs ( i.e. , cases where the reparandum of one repair is the repair of another ) . 
	</s>
	

	<s id="103">
		 ( Naturally , in testing we have no such freedom . 
	</s>
	

	<s id="104">
		 ) We analyze each repair as consisting of n aligned word pairs ( we describe the interregnum model later ) . 
	</s>
	

	<s id="105">
		 MZ is the ith reparandum word and RZ is the corresponding repair word , so both of these range over E U ~0~ . 
	</s>
	

	<s id="106">
		 We define M0 and R0 to be source sentence word that preceded the repair ( which is ` $ ’ if the repair begins at the beginning of a sen- tence ) . 
	</s>
	

	<s id="107">
		 We define M ' Z and R'Z to be the last non-0 reparandum and repair words respectively , i.e. , M ' Z = MZ if MZ =~ 0 and M ' Z = M'Z_1 oth- erwise . 
	</s>
	

	<s id="108">
		 Finally , TZ , i = 1 ... n + 1 , which indicates the type of repair that occurs at posi- tion i , ranges over { copy , subst , ins , del , nonrep } , where T,,,+1 = nonrep ( indicating that the repair has ended ) , and for i = 1 ... n , TZ = copy if MZ=RZ,TZ=ins ifRZ=0,TZ=del ifMZ=0 and TZ = su bst otherwise . 
	</s>
	

	<s id="109">
		 The distributions we estimate from the aligned repair data are the following . 
	</s>
	

	<s id="110">
		 P , ( TZ l M'Z_ 1 , R'Z_ 1 ) is the probability of seeing repair type TZ following the reparandum word M'Z_1 and repair word R'Z_1 ; e.g. , P , ( non rep lBoston , Denver ) is the probability of the repair ending when Boston is the last reparandum word and Denver is the last repair word . 
	</s>
	

	<s id="111">
		 P,(MZlTZ = ins,M'Z_1,R'Z ) is the probability that MZ is the word that is inserted into the reparandum ( i.e. , RZ = 0 ) given that some word is substituted , and that the preceding reparan dum and repair words are M'Z_1 and R'Z . 
	</s>
	

	<s id="112">
		 For example Pr(tomorrowlins , Boston , Denver ) is the probability that the word tomorrow is inserted into the reparandum after the words Boston and Denver , given that some word is inserted . 
	</s>
	

	<s id="113">
		 Pr(MZlTZ = subst , M'Z_1 , R'Z ) is the prob- ability that MZ is the word that is substi- tuted in the reparandum for R'Z , given that some word is substituted . 
	</s>
	

	<s id="114">
		 For example , Pr(Bostonlsubst , to , Denver ) is the probability that Boston is substituted for Denver , given that some word is substituted . 
	</s>
	

	<s id="115">
		 Finally , we also estimated a probability distribution PZ(W) over interregnum strings as follows . 
	</s>
	

	<s id="116">
		 Our training corpus annotates what we call interregnum expressions , such as uh and I mean . 
	</s>
	

	<s id="117">
		 We estimated a simple unigram distribution over all of the interregnum expressions observed in our training corpus , and also extracted the empirical distribution of the number of interregnum expressions in each repair . 
	</s>
	

	<s id="118">
		 Interregnums are generated as follows . 
	</s>
	

	<s id="119">
		 First , the number k of interregnum expressions is chosen using the empirical distribution . 
	</s>
	

	<s id="120">
		 Then k interregnum expressions are independently generated from the unigram distribution of interregnum expressions , and appended to yield the interregnum string W . 
	</s>
	

	<s id="121">
		 The weighted TAG that constitutes the channel model is straight forward to define using these conditional probability distributions . 
	</s>
	

	<s id="122">
		 Note that the language model generates the source string X . 
	</s>
	

	<s id="123">
		 Thus the weights of the TAG rules condition on the words in X , but do not generate them . 
	</s>
	

	<s id="124">
		 There are three different schema defining the initial trees of the TAG . 
	</s>
	

	<s id="125">
		 These correspond to analyzing a source word as not beginning a repair ( e.g. , a1 and a3 in Figure 3 ) , analyzing a source word as beginning a repair ( e.g. , a2 ) , and generating an interregnum ( e.g. , a5 ) . 
	</s>
	

	<s id="126">
		 Auxiliary trees generate the paired reparandum/repair words of a repair . 
	</s>
	

	<s id="127">
		 There are five different schema defining the auxiliary trees corresponding to the five different values that TZ can take . 
	</s>
	

	<s id="128">
		 Note that the nonterminal Rm,r expanded by the auxiliary trees is annotated with the last reparandum and repair words M'Z_1 and R'Z_1 respectively , which makes it possible to condition the rule’s weight on these words . 
	</s>
	

	<s id="129">
		 Auxiliary trees of the form ( 01 ) generate reparandum words that are copies of the corresponding repair words ; the weight on such trees is Pr(copylM'Z_1 , R'Z_1 ) . 
	</s>
	

	<s id="130">
		 Trees of the form ( 02 ) substitute a reparandum word for a repair word ; their weight is Pr(substlM'Z_1 , R'Z_1)Pr(MZlsubst , M'Z_1 , R'Z ) . 
	</s>
	

	<s id="131">
		 Trees of the form ( 03 ) end a repair ; their weight is Pr(nonrepl , M'Z_1 , R'Z_1 ) . 
	</s>
	

	<s id="132">
		 Auxiliary trees of the form ( 03 ) end a repair ; they are weighted Pr(nonreplM'Z_1 , R'Z_1 ) . 
	</s>
	

	<s id="133">
		 Auxiliary trees of the form ( 04 ) permit the repair word R'Z_1 to be deleted in the reparandum ; the weight of such a tree is Pr(dellM'Z_1,R'Z_1) . 
	</s>
	

	<s id="134">
		 Finally , auxiliary trees of the form ( 05 ) generate a reparandum word MZ is inserted ; the weight of such a tree is Pr(inslM'Z_1 , R'Z_1)Pr(MZlins , M'Z_1 , R'Z_1 ) . 
	</s>
	

	<s id="135">
		 3 Detecting and repairing speech repairs The TAG just described is not probabilistic ; informally , it does not include the probability costs for generating the source words . 
	</s>
	

	<s id="136">
		 However , it is easy to modify the TAG so it does include a bigram model that does generate the source words , since each nonterminal encodes the preceding source word . 
	</s>
	

	<s id="137">
		 That is , we multiply the weights of each TAG production given earlier that introduces a source word RZ by Pn ( RZ l RZ_1 ) . 
	</s>
	

	<s id="138">
		 The resulting stochastic TAG is in fact exactly the intersection of the channel model TAG with a bigram language model . 
	</s>
	

	<s id="139">
		 The standard n5 bottom-up dynamic programming parsing algorithm can be used with this stochastic TAG . 
	</s>
	

	<s id="140">
		 Each different parse of the observed string Y with this grammar corresponds to a way of analyzing Y in terms of a hypothetical underlying sentence X and a number of different repairs . 
	</s>
	

	<s id="141">
		 In our experiments below we extract the 20 most likely parses for each sentence . 
	</s>
	

	<s id="142">
		 Since the weighted grammar just given does not generate the source string X , the score of the parse using the weighted TAG is P ( Y l X ) . 
	</s>
	

	<s id="143">
		 This score multiplied by the probability P(X) of the source string using the syntactic parser based language model , is our best estimate of the probability of an analysis . 
	</s>
	

	<s id="144">
		 However , there is one additional complication that makes a marked improvement to the model’s performance . 
	</s>
	

	<s id="145">
		 Recall that we use the standard bottom-up dynamic programming TAG parsing algorithm to search for candidate parses . 
	</s>
	

	<s id="146">
		 This algorithm has n5 running time , where n is the length of the string . 
	</s>
	

	<s id="147">
		 Even though our sentences are often long , it is extremely unlikely that any repair will be longer than , say , 12 words . 
	</s>
	

	<s id="148">
		 So to increase processing speed we only compute analyses for strings of length 12 or less . 
	</s>
	

	<s id="149">
		 For every such substring that can be analyzed as a repair we calculate the repair odds , i.e. , the probability of generating this substring as a repair divided by the probability of generating this substring via the non-repair rules , or equivalently , the odds that this substring constitutes a repair . 
	</s>
	

	<s id="150">
		 The substrings with high repair odds are likely to be repairs . 
	</s>
	

	<s id="151">
		 This more local approach has a number of advantages over computing a global analysis . 
	</s>
	

	<s id="152">
		 First , as just noted it is much more efficient to compute these partial analyses rather than to compute global analyses of the entire sentence . 
	</s>
	

	<s id="153">
		 Second , there are rare cases in which the same substring functions as both repair and reparandum ( i.e. , the repair string is itself repaired again ) . 
	</s>
	

	<s id="154">
		 A single global analysis would not be able to capture this ( since the TAG channel model does not permit the same substring to be both a reparandum and a repair ) , but we combine these overlapping repair substring analyses in a post-processing operation to yield an analysis of the whole sentence . 
	</s>
	

	<s id="155">
		 ( We do insist that the reparandum and interregnum of a repair do not overlap with those of any other repairs in the same analysis ) . 
	</s>
	

	<s id="156">
		 4 Evaluation This section describes how we evaluate our noisy model . 
	</s>
	

	<s id="157">
		 As mentioned earlier , following 
		<ref citStr="Charniak and Johnson ( 2001 )" id="11" label="CERF" position="26096">
			Charniak and Johnson ( 2001 )
		</ref>
		 our test data consisted of all Penn III Switchboard tree-bank sw4[0- 1]*.mrg files . 
	</s>
	

	<s id="158">
		 However , our test data differs from theirs in that in this test we deleted all partial words and punctuation from the data , as this results in a more realistic test situation . 
	</s>
	

	<s id="159">
		 Since the immediate goal of this work is to produce a program that identifies the words of a sentence that belong to the reparandum of a repair construction ( to a first approximation these words can be ignored in later processing ) , our evaluation focuses on the model’s performance in recovering the words in a reparandum . 
	</s>
	

	<s id="160">
		 That is , the model is used to classify each word in the sentence as belonging to a reparandum or not , and all other additional structure produced by the model is ignored . 
	</s>
	

	<s id="161">
		 We measure model performance using standard precision p , recall r and f-score f , measures . 
	</s>
	

	<s id="162">
		 If n , is the number of reparandum words the model correctly classified , nt is the number of true reparandum words given by the manual annotations and nm is the number of words the model predicts to be reparandum words , then the precision is n,/nm , recall is n,/nt , and f is 2pr/(p + r ) . 
	</s>
	

	<s id="163">
		 For comparison we include the results of running the word-by-word classifier described in 
		<ref citStr="Charniak and Johnson ( 2001 )" id="12" label="OEPF" position="27424">
			Charniak and Johnson ( 2001 )
		</ref>
		 , but where partial words and punctuation have been removed from the training and test data . 
	</s>
	

	<s id="164">
		 We also provide results for our noisy channel model using a bigram language model and a second trigram model where the twenty most likely analyses are rescored . 
	</s>
	

	<s id="165">
		 Finally we show the results using the parser language model . 
	</s>
	

	<s id="166">
		 CJ01 ' Bigram Trigram Parser Precision 0.951 0.776 0.774 0.820 Recall 0.631 0.736 0.763 0.778 F-score 0.759 0.756 0.768 0.797 The noisy channel model using a bigram language model does a slightly worse job at identifying reparandum and interregnum words than the classifier proposed in 
		<ref citStr="Charniak and Johnson ( 2001 )" id="13" label="OEPF" position="28085">
			Charniak and Johnson ( 2001 )
		</ref>
		 . 
	</s>
	

	<s id="167">
		 Replacing the bigram language model with a trigram model helps slightly , and parser- based language model results in a significant performance improvement over all of the others . 
	</s>
	

	<s id="168">
		 5 Conclusion and further work This paper has proposed a novel noisy channel model of speech repairs and has used it to identify reparandum words . 
	</s>
	

	<s id="169">
		 One of the advantages of probabilistic models is that they can be integrated with other probabilistic models in a principled way , and it would be interesting to investigate how to integrate this kind of model of speech repairs with probabilistic speech recognizers . 
	</s>
	

	<s id="170">
		 There are other kinds of joint models of reparandum and repair that may produce a better reparandum detection system . 
	</s>
	

	<s id="171">
		 We have experimented with versions of the models described above based on POS bi-tag dependencies rather than word bigram dependencies , but with results very close to those presented here . 
	</s>
	

	<s id="172">
		 Still , more sophisticated models may yield better performance . 
	</s>
	

	<s id="173">
		 It would also be interesting to combine this probabilistic model of speech repairs with the word classifier approach of 
		<ref citStr="Charniak and Johnson ( 2001 )" id="14" label="CEPF" position="29271">
			Charniak and Johnson ( 2001 )
		</ref>
		 . 
	</s>
	

	<s id="174">
		 That approach may do so well because many speech repairs are very short , involving only one or two words 
		<ref citStr="Shriberg and Stolcke ( 1998 )" id="15" label="CEPF" position="29418">
			Shriberg and Stolcke ( 1998 )
		</ref>
		 , so the reparandum , interregnum and repair are all contained in the surrounding word window used as features by the classifier . 
	</s>
	

	<s id="175">
		 On the other hand , the probabilistic model of repairs explored here seems to be most successful in identifying long repairs in which the reparandum and repair are similar enough to be unlikely to have been generated independently . 
	</s>
	

	<s id="176">
		 Since the two approaches seem to have different strengths , a combined model may outperform both of them . 
	</s>
	

	<s id="177">
		 References Eugene Charniak and Mark Johnson . 
	</s>
	

	<s id="178">
		 2001 . 
	</s>
	

	<s id="179">
		 Edit detection and parsing for transcribed speech . 
	</s>
	

	<s id="180">
		 In Proceedings of the 2nd Meeting of the North American Chapter of the Association for Computational Linguistics , pages 118–126 . 
	</s>
	

	<s id="181">
		 The Association for Computational Linguistics . 
	</s>
	

	<s id="182">
		 Eugene Charniak . 
	</s>
	

	<s id="183">
		 2001. Immediate-head pars- ing for language models . 
	</s>
	

	<s id="184">
		 In Proceedings of the 39th Annual Meeting of the Association for Computational Linguistics . 
	</s>
	

	<s id="185">
		 The Association for Computational Linguistics . 
	</s>
	

	<s id="186">
		 Stanley F. Chen and Joshua Goodman . 
	</s>
	

	<s id="187">
		 1998. An empirical study of smoothing techniques for language modeling . 
	</s>
	

	<s id="188">
		 Technical Report TR10-98 , Center for Research in Computing Technology , Harvard University . 
	</s>
	

	<s id="189">
		 Peter A. Heeman and James F. Allen . 
	</s>
	

	<s id="190">
		 1999. Speech repairs , intonational phrases , and discourse markers : Modeling speaker’s utterances in spoken dialogue . 
	</s>
	

	<s id="191">
		 Computational Linguistics , 25(4):527–571 . 
	</s>
	

	<s id="192">
		 Stuart M. Shieber and Yves Schabes . 
	</s>
	

	<s id="193">
		 1990. Synchronous tree-adjoining grammars . 
	</s>
	

	<s id="194">
		 In Proceedings of the 13th International Conference on Computational Linguistics ( COLING 1990 ) , pages 253–258 . 
	</s>
	

	<s id="195">
		 Stuart M. Shieber . 
	</s>
	

	<s id="196">
		 1985. Evidence against the Context-Freeness of natural language . 
	</s>
	

	<s id="197">
		 Linguistics and Philosophy , 8(3):333–344 . 
	</s>
	

	<s id="198">
		 Elizabeth Shriberg and Andreas Stolcke . 
	</s>
	

	<s id="199">
		 1998. How far do speakers back up in repairs ? 
	</s>
	

	<s id="200">
		 a quantitative model . 
	</s>
	

	<s id="201">
		 In Proceedings of the International Conference on Spoken Language Processing , volume 5 , pages 2183–2186 , Sydney , Australia . 
	</s>
	

	<s id="202">
		 Elizabeth Shriberg . 
	</s>
	

	<s id="203">
		 1994 . 
	</s>
	

	<s id="204">
		 Preliminaries to a Theory of Speech Disfluencies . 
	</s>
	

	<s id="205">
		 Ph.D . 
	</s>
	

	<s id="206">
		 thesis , University of California , Berkeley . 
	</s>
	


</acldoc>
