<?xml version="1.0" encoding="iso-8859-1"?>
<acldoc acl_id="P04-1084">
	

	<s id="1">
		 Generalized Multitext Grammars I. Dan Melamed Computer Science Department New York University 715 Broadway , 7th Floor New York , NY , 10003 , USA lastname @cs.nyu.edu Giorgio Satta Dept. of Information Eng’g University of Padua via Gradenigo 6/A I-35131 Padova , Italy lastname @dei.unipd.it Benjamin Wellington Computer Science Department New York University 715 Broadway , 7th Floor New York , NY , 10003 , USA lastname @cs.nyu.edu Abstract Generalized Multitext Grammar ( GMTG ) is a synchronous grammar formalism that is weakly equivalent to Linear Context-Free Rewriting Systems ( LCFRS ) , but retains much of the notational and intuitive simplicity of Context-Free Grammar ( CFG ) . 
	</s>
	

	<s id="2">
		 GMTG allows both synchronous and independent rewriting . 
	</s>
	

	<s id="3">
		 Such flexibility facilitates more perspicuous modeling of parallel text than what is possible with other synchronous formalisms . 
	</s>
	

	<s id="4">
		 This paper investigates the generative capacity of GMTG , proves that each component grammar of a GMTG retains its generative power , and proposes a generalization of Chomsky Normal Form , which is necessary for synchronous CKY-style parsing . 
	</s>
	

	<s id="5">
		 1 Introduction Synchronous grammars have been proposed for the formal description of parallel texts representing translations of the same document . 
	</s>
	

	<s id="6">
		 As shown by 
		<ref citStr="Melamed ( 2003 )" id="1" label="CEPF" position="1350">
			Melamed ( 2003 )
		</ref>
		 , a plausible model of parallel text must be able to express discontinuous constituents . 
	</s>
	

	<s id="7">
		 Since linguistic expressions can vanish in translation , a good model must be able to express independent ( in addition to synchronous ) rewriting . 
	</s>
	

	<s id="8">
		 Inversion Transduction Grammar ( ITG ) 
		<ref citStr="Wu , 1997" id="2" label="CJPN" position="1660">
			( Wu , 1997 )
		</ref>
		 and Syntax-Directed Translation Schema ( SDTS ) 
		<ref citStr="Aho and Ullman , 1969" id="3" label="CJPN" position="1734">
			( Aho and Ullman , 1969 )
		</ref>
		 lack both of these properties . 
	</s>
	

	<s id="9">
		 Synchronous Tree Adjoining Grammar ( STAG ) 
		<ref citStr="Shieber , 1994" id="4" label="CJPN" position="1838">
			( Shieber , 1994 )
		</ref>
		 lacks the latter and allows only limited discontinuities in each tree . 
	</s>
	

	<s id="10">
		 Generalized Multitext Grammar ( GMTG ) offers a way to synchronize Mildly Context-Sensitive Grammar ( MCSG ) , while satisfying both of the above criteria . 
	</s>
	

	<s id="11">
		 The move to MCSG is motivated by our desire to more perspicuously account for certain syntactic phenomena that cannot be easily captured by context-free grammars , such as clitic climbing , extraposition , and other types of long- distance movement 
		<ref citStr="Becker et al. , 1991" id="5" label="CEPF" position="2359">
			( Becker et al. , 1991 )
		</ref>
		 . 
	</s>
	

	<s id="12">
		 On the other hand , MCSG still observes some restrictions that make the set of languages it generates less ex- pensive to analyze than the languages generated by ( properly ) context-sensitive formalisms . 
	</s>
	

	<s id="13">
		 More technically , our proposal starts from Multitext Grammar ( MTG ) , a formalism for synchronizing context-free grammars recently proposed by 
		<ref citStr="Melamed ( 2003 )" id="6" label="CERF" position="2747">
			Melamed ( 2003 )
		</ref>
		 . 
	</s>
	

	<s id="14">
		 In MTG , synchronous rewriting is implemented by means of an indexing relation that is maintained over occurrences of nonterminals in a sentential form , using essentially the same machinery as SDTS . 
	</s>
	

	<s id="15">
		 Unlike SDTS , MTG can extend the dimensionality of the translation relation beyond two , and it can implement independent rewriting by means of partial deletion of syntactic structures . 
	</s>
	

	<s id="16">
		 Our proposal generalizes MTG by moving from component grammars that generate context- free languages to component grammars whose generative power is equivalent to Linear Context-Free Rewriting Systems ( LCFRS ) , a formalism for describing a class of MCSGs . 
	</s>
	

	<s id="17">
		 The generalization is achieved by allowing context-free productions to rewrite tuples of strings , rather than single strings . 
	</s>
	

	<s id="18">
		 Thus , we retain the intuitive top-down definition of synchronous derivation original in SDTS and MTG but not found in LCFRS , while extending the generative power to linear context-free rewriting languages . 
	</s>
	

	<s id="19">
		 In this respect , GMTG has also been inspired by the class of Local Unordered Scattered Context Grammars 
		<ref citStr="Rambow and Satta , 1999" id="7" label="CERF" position="3920">
			( Rambow and Satta , 1999 )
		</ref>
		 . 
	</s>
	

	<s id="20">
		 A syntactically very different synchronous formalism involving LCFRS has been presented by 
		<ref citStr="Bertsch and Nederhof ( 2001 )" id="8" label="CJPF" position="4052">
			Bertsch and Nederhof ( 2001 )
		</ref>
		 . 
	</s>
	

	<s id="21">
		 This paper begins with an informal description of GMTG . 
	</s>
	

	<s id="22">
		 It continues with an investigation of this formalism’s generative capacity . 
	</s>
	

	<s id="23">
		 Next , we prove that in GMTG each component grammar retains its generative power , a requirement for synchronous formalisms that 
		<ref citStr="Rambow and Satta ( 1996 )" id="9" label="CEPF" position="4371">
			Rambow and Satta ( 1996 )
		</ref>
		 called the “weak language preservation property.” Lastly , we propose a synchronous generalization of Chomsky Normal Form , which lays the groundwork for synchronous parsing under GMTG using a CKYstyle algorithm 
		<ref citStr="Younger , 1967" id="10" label="CEPF" position="4586">
			( Younger , 1967 
		</ref>
		<ref citStr="Melamed , 2004" id="11" label="CEPF" position="4603">
			; Melamed , 2004 )
		</ref>
		 . 
	</s>
	

	<s id="24">
		 2 Informal Description and Comparisons GMTG is a generalization of MTG , which is itself a generalization of CFG to the synchronous case . 
	</s>
	

	<s id="25">
		 Here we present MTG in a new notation that shows the relation to CFG more clearly . 
	</s>
	

	<s id="26">
		 For example , the following MTG productions can generate the multi- text [ ( Ifed the cat ) , ( ya kota kormil)]:1 ( S ) ( S ) PN VP PN VP ( 1 ) PN PN I ya ( 2 ) VP VP V NP NP V ( 3 ) V V fed kormil ( 4 ) NP NP D N N ( 5 ) D the ( 6 ) N N cat kota ( 7 ) Each production in this example has two components , the first modeling English and the second ( transliterated ) Russian . 
	</s>
	

	<s id="27">
		 Nonterminals with the same index must be rewritten together ( synchronous rewriting ) . 
	</s>
	

	<s id="28">
		 One strength of MTG , and thus also GMTG , is shown in Productions ( 5 ) and ( 6 ) . 
	</s>
	

	<s id="29">
		 There is a determiner in English , but not in Russian , so Production ( 5 ) does not have the nonterminal D in the Russian component and ( 6 ) applies only to the English component ( independent rewriting ) . 
	</s>
	

	<s id="30">
		 Formalisms that do not allow independent rewriting require a corresponding to appear in the second component on the right-hand side ( RHS ) of Production ( 5 ) , and this would eventually generate the empty string . 
	</s>
	

	<s id="31">
		 This approach has the disadvantage that it introduces spurious ambiguity about the position of the “empty” nonterminal with respect to the other nonterminals in its component . 
	</s>
	

	<s id="32">
		 Spurious ambiguity leads to wasted effort during parsing . 
	</s>
	

	<s id="33">
		 GMTG’s implementation of independent rewriting through the empty tuple ( ) serves a very different function from the empty string . 
	</s>
	

	<s id="34">
		 Consider the following GMTG : ( 8 ) ( 9 ) ( 10 ) ( 11 ) Production ( 8 ) asserts that symbol vanishes in translation . 
	</s>
	

	<s id="35">
		 Its application removes both of the non- terminals on the left-hand side ( LHS ) , pre-empting any other production . 
	</s>
	

	<s id="36">
		 In contrast , Production ( 9 ) ' We write production components both side by side and one above another to save space , but each component is always in parentheses . 
	</s>
	

	<s id="37">
		 explicitly relaxes the synchronization constraint , so that the two components can be rewritten independently . 
	</s>
	

	<s id="38">
		 The other six productions make assertions about only one component and are agnostic about the other component . 
	</s>
	

	<s id="39">
		 Incidentally , generating the same language with only fully synchronized productions would raise the number of required productions to 11 , so independent rewriting also helps to reduce grammar size . 
	</s>
	

	<s id="40">
		 Independent rewriting is also useful for modeling paraphrasing . 
	</s>
	

	<s id="41">
		 Take , for example , [ ( Tim got a pink slip ) , ( Tim got laid off ) ] . 
	</s>
	

	<s id="42">
		 While the two sentences have the same meaning , the objects of their verb phrases are structured very differently . 
	</s>
	

	<s id="43">
		 GMTG can express their relationships as follows : S S NP VP NP VP ( 12 ) VP VP V NP V PP ( 13 ) NP PP DT A N VB R ( 14 ) NP NP Tim Tim ( 15 ) V V got got ( 16 ) DT a ( 17 ) A pink ( 18 ) N slip ( 19 ) VB laid ( 20 ) R off^ ( 21 ) As described by 
		<ref citStr="Melamed ( 2003 )" id="12" label="CEPF" position="7719">
			Melamed ( 2003 )
		</ref>
		 , MTG requires production components to be contiguous , except after binarization . 
	</s>
	

	<s id="44">
		 GMTG removes this restriction . 
	</s>
	

	<s id="45">
		 Take , for example , the sentence pair [ ( The doctor treats his teeth ) , ( El m´edico le examino los dientes ) ] 
		<ref citStr="Dras and Bleam , 2000" id="13" label="CEPF" position="7995">
			( Dras and Bleam , 2000 )
		</ref>
		 . 
	</s>
	

	<s id="46">
		 The Spanish clitic le and the NP los dientes should both be paired with the English NP his teeth , giving rise to a discontinuous constituent in the Spanish component . 
	</s>
	

	<s id="47">
		 A GMTG fragment for the sentence is shown below : S S NP VP NP VP VP VP V NP NP V NP NP NP The doctor El m´edico V V treats examino NP NP NP his teeth le los dientes Note the discontinuity between le and los dientes . 
	</s>
	

	<s id="48">
		 Such discontinuities are marked by commas on both the LHS and the RHS of the relevant component . 
	</s>
	

	<s id="49">
		 GMTG’s flexibility allows it to deal with many complex syntactic phenomena . 
	</s>
	

	<s id="50">
		 For example , 
		<ref citStr="Becker et al . ( 1991 )" id="14" label="CEPF" position="8644">
			Becker et al . ( 1991 )
		</ref>
		 point out that TAG does not have the generative capacity to model certain kinds of scrambling in German , when the so-called “co- occurrence constraint” is imposed , requiring the N has promised N S ( 22 ) S N S N S versprochen hat to indict N N ( 23 ) N N zu ¨uberf¨uhren derivational pairing between verbs and their complements . 
	</s>
	

	<s id="51">
		 They examine the English/German sentence fragment [ ( ... that the detective has promised the client to indict the suspect of the crime ) , ( ... daß des Verbrechens der Detektiv den Verd¨achtigen dem Klienten zu ¨uberf¨uhren versprochen hat ) ] . 
	</s>
	

	<s id="52">
		 The verbs versprochen and ¨uberf¨uhren both have two noun phrases as arguments . 
	</s>
	

	<s id="53">
		 In German , these noun phrases can appear to the left of the verbs in any order . 
	</s>
	

	<s id="54">
		 The following is a GMTG fragment for the above sentence pair2 : S S S S S S The discontinuities allow the noun arguments of versprochen to be placed in any order with the noun arguments of ¨uberf¨uhren . 
	</s>
	

	<s id="55">
		 
		<ref citStr="Rambow ( 1995 )" id="15" label="CEPF" position="9664">
			Rambow ( 1995 )
		</ref>
		 gives a similar analysis . 
	</s>
	

	<s id="56">
		 3 Formal Definitions Let be a finite set of nonterminal symbols and let be the set of integers.3 We define .4 Elements of will be called indexed nonterminal symbols . 
	</s>
	

	<s id="57">
		 In what follows we also consider a finite set of terminal symbols , disjoint from , and work with strings in , where . 
	</s>
	

	<s id="58">
		 For , we define , i.e. the set of indexes that ap- pear in . 
	</s>
	

	<s id="59">
		 An indexed tuple vector , or ITV , is a vector of tuples of strings over , having the form where , and for , . 
	</s>
	

	<s id="60">
		 We write , , to denote the -th component of and to denote the arity of such a tuple , which is . 
	</s>
	

	<s id="61">
		 When , is the empty tuple , written . 
	</s>
	

	<s id="62">
		 This should not be confused with , that is the tuple of arity one containing the empty string . 
	</s>
	

	<s id="63">
		 A link is an ITV where 2These are only a small subset of the necessary productions . 
	</s>
	

	<s id="64">
		 The subscripts on the nonterminals indicate what terminals they will eventually yield ; the terminal productions have been left out to save space . 
	</s>
	

	<s id="65">
		 3Any other infinite set of indexes would suit too . 
	</s>
	

	<s id="66">
		 4The parentheses around indexes distinguish them from other uses of superscripts in formal language theory . 
	</s>
	

	<s id="67">
		 However , we shall omit the parentheses when the context is unambiguous . 
	</s>
	

	<s id="68">
		 each consists of one indexed nonterminal and all of these nonterminals are coindexed . 
	</s>
	

	<s id="69">
		 As we shall see , the notion of a link generalizes the notion of nonterminal in context-free grammars : each production rewrites a single link . 
	</s>
	

	<s id="70">
		 Definition 1 Let be some integer con- stant . 
	</s>
	

	<s id="71">
		 A generalized multitext grammar with dimensions ( -GMTG for short ) is a tuple where , arefinite , disjoint sets of nonterminal and terminal symbols , respectively , is the start symbol and is a finite set of productions . 
	</s>
	

	<s id="72">
		 Each production has the form , where is a -dimensional link and is a - dimensional ITV such that for . 
	</s>
	

	<s id="73">
		 If contains , then We omit symbol from -GMTG whenever it is not relevant . 
	</s>
	

	<s id="74">
		 To simplify notation , we write productions as , with each , . 
	</s>
	

	<s id="75">
		 I.e. we omit the unique index appearing on the LHS of . 
	</s>
	

	<s id="76">
		 Each is called a production component . 
	</s>
	

	<s id="77">
		 The production component is called the inactive production component . 
	</s>
	

	<s id="78">
		 All other production components are called active and we set . 
	</s>
	

	<s id="79">
		 Inactive production components are used to relax synchronous rewriting on some dimen- sions , that is to implement rewriting on com- ponents . 
	</s>
	

	<s id="80">
		 When , rewriting is licensed on one component , independently of all the others . 
	</s>
	

	<s id="81">
		 Two grammar parameters play an important role in this paper . 
	</s>
	

	<s id="82">
		 Let and . 
	</s>
	

	<s id="83">
		 Definition 2 The rank of a production is the number of links on its RHS : . 
	</s>
	

	<s id="84">
		 The rank of a GMTG is For example , the rank of Production ( 23 ) is two and its fan-out is four . 
	</s>
	

	<s id="85">
		 In GMTG , the derives relation is defined over ITVs . 
	</s>
	

	<s id="86">
		 GMTG derivation proceeds by synchronous application of all the active components in some production . 
	</s>
	

	<s id="87">
		 The indexed nonterminals to be rewritten simultaneously must all have the same index , and all nonterminals indexed with in the ITV must be rewritten simultaneously . 
	</s>
	

	<s id="88">
		 Some additional notation will help us to define rewriting precisely . 
	</s>
	

	<s id="89">
		 A reindexing is a one-to-one function on , and is extended to by letting for Definition 3 The fan-out of , and are , respectively , , and . 
	</s>
	

	<s id="90">
		 . 
	</s>
	

	<s id="91">
		 . 
	</s>
	

	<s id="92">
		 and for . 
	</s>
	

	<s id="93">
		 We also extend to strings in analogously . 
	</s>
	

	<s id="94">
		 We say that are independent if. . 
	</s>
	

	<s id="95">
		 Definition 4 Let be a -GMTG and let with and . 
	</s>
	

	<s id="96">
		 Let and be two ITVs with and . 
	</s>
	

	<s id="97">
		 Assume that is some concatenation of all and that is some concatenation of all , holds whenever there exists an index such that the following two conditions are satisfied : ( i ) for each we have such that , and each is obtained from by replacing each with ; ( ii ) for each we have and . 
	</s>
	

	<s id="98">
		 We generalize the relation to and in the usual way , to represent derivations . 
	</s>
	

	<s id="99">
		 We can now introduce the notion of generated language ( or generated relation ) . 
	</s>
	

	<s id="100">
		 A start link of a -GMTG is a -dimensional link where at least one component is , the start symbol , and the rest of the components are . 
	</s>
	

	<s id="101">
		 Thus , there are start links . 
	</s>
	

	<s id="102">
		 The language generated by a -GMTG is a start link or^ . 
	</s>
	

	<s id="103">
		 Each ITV in is called a multitext . 
	</s>
	

	<s id="104">
		 For every -GMTG , can be partitioned into subsets , each containing multitexts derived from a different start link . 
	</s>
	

	<s id="105">
		 These subsets are disjoint , since every non- empty tuple of a start link is eventually rewritten as a string , either empty or not.5 A start production is a production whose LHS is a start link . 
	</s>
	

	<s id="106">
		 A GMTG writer can choose the combinations of components in which the grammar can generate , by including start productions with the desired combinations of active components . 
	</s>
	

	<s id="107">
		 If a grammar contains no start productions with a certain combination of active components , then the corresponding subset of will be empty . 
	</s>
	

	<s id="108">
		 Allowing a single GMTG to generate multitexts with 5 We are assuming that there are no useless nonterminals . 
	</s>
	

	<s id="109">
		 some empty tuples corresponds to modeling relations of different dimensionalities . 
	</s>
	

	<s id="110">
		 This capability enables a synchronous grammar to govern lower- dimensional sublanguages/translations . 
	</s>
	

	<s id="111">
		 For example , an English/Italian GMTG can include Production ( 9 ) , an English CFG , and an Italian CFG . 
	</s>
	

	<s id="112">
		 A single GMTG can then govern both translingual and monolingual information in applications . 
	</s>
	

	<s id="113">
		 Furthermore , this capability simplifies the normalization procedure described in Section 6 . 
	</s>
	

	<s id="114">
		 Otherwise , this procedure would require exceptions to be made when eliminating epsilons from start productions . 
	</s>
	

	<s id="115">
		 4 Generative Capacity In this section we compare the generative capacity of GMTG with that of mildly context-sensitive grammars . 
	</s>
	

	<s id="116">
		 We focus on LCFRS , using the notational variant introduced by 
		<ref citStr="Rambow and Satta ( 1999 )" id="16" label="CERF" position="15811">
			Rambow and Satta ( 1999 )
		</ref>
		 , briefly summarized below . 
	</s>
	

	<s id="117">
		 Throughout this section , strings and vectors of the form will be identified . 
	</s>
	

	<s id="118">
		 For lack of space , some proofs are only sketched , or entirely omitted when relatively intuitive : 
		<ref citStr="Melamed et al . ( 2004 )" id="17" label="CEPF" position="16062">
			Melamed et al . ( 2004 )
		</ref>
		 provide more details . 
	</s>
	

	<s id="119">
		 Let be some terminal alphabet . 
	</s>
	

	<s id="120">
		 A function has rank if it is defined on , for integers ( 24 ) where represents some grouping into strings of all and only the variables appearing in the left-hand side , possibly with some additional terminal symbols . 
	</s>
	

	<s id="121">
		 ( Symbols , and are overloaded below . 
	</s>
	

	<s id="122">
		 ) , and is a finite set of productions of the form , where , , and where is a linear regular function having rank and fan-out , defined on . 
	</s>
	

	<s id="123">
		 For every and , we write if ( i ) and ; or else ,, and let be some reindexing such that strings and are independent . 
	</s>
	

	<s id="124">
		 The derives relation with , . 
	</s>
	

	<s id="125">
		 Also , has fan-out if its range is a subset of . 
	</s>
	

	<s id="126">
		 Let , , , and , be string-valued variables . 
	</s>
	

	<s id="127">
		 Function is linear regular if it is defined by an equation of the form Definition 5 A Linear Context-Free Rewriting System ( LCFRS ) is a quadruple where , and are as in GMTGs , every is associated with an integer with Let . 
	</s>
	

	<s id="128">
		 Also let and let be the number of occurrences of appearing in . 
	</s>
	

	<s id="129">
		 We define an alphabet .For each and with , and , we define a string over as fol- lows . 
	</s>
	

	<s id="130">
		 Let , each . 
	</s>
	

	<s id="131">
		 Then , where in case ; and in case , where is the index of and the indicated occurrence of is the -th occurrence of such symbol appearing from left to right in string . 
	</s>
	

	<s id="132">
		 Next , for every possible , , and as above , we add to a production where ( each above satisfies ) . 
	</s>
	

	<s id="133">
		 Note that is a function with rank and fan-out .Thus we have and . 
	</s>
	

	<s id="134">
		 Without loss of generality , we assume that contains only one production with appearing on the left-hand side , having the form . 
	</s>
	

	<s id="135">
		 To complete the construction of , we then add a last production where . 
	</s>
	

	<s id="136">
		 We claim that , for each , and as above iff . 
	</s>
	

	<s id="137">
		 The lemma follows from this claim . 
	</s>
	

	<s id="138">
		 The proof of the next lemma is relatively intuitive and therefore omitted . 
	</s>
	

	<s id="139">
		 Lemma 2 For any -GMTG , there exists a properly synchronous -GMTG such that , and . 
	</s>
	

	<s id="140">
		 The language generated by is defined as .Let , .The rank of and are , respectively , and . 
	</s>
	

	<s id="141">
		 The fan-out of and are , respectively , and . 
	</s>
	

	<s id="142">
		 The proof of the following theorem is relatively intuitive and therefore omitted . 
	</s>
	

	<s id="143">
		 ( ii ) , for every , and . 
	</s>
	

	<s id="144">
		 Next , we show that the generative capacity of GMTG does not exceed that of LCFRS . 
	</s>
	

	<s id="145">
		 In order to compare string tuples with bare strings , we introduce two special functions ranging over multi- texts . 
	</s>
	

	<s id="146">
		 Assume two fresh symbols .For a multitext we write , where if and otherwise , . 
	</s>
	

	<s id="147">
		 For a multitext with no empty tuple , we write . 
	</s>
	

	<s id="148">
		 We extend both functions to sets of multitexts in the obvious way : and . 
	</s>
	

	<s id="149">
		 In a -GMTG , a production with active components , , is said to be -active . 
	</s>
	

	<s id="150">
		 A -GMTG whose start productions are all -active is called properly synchronous . 
	</s>
	

	<s id="151">
		 Lemma 1 For any properly synchronous -GMTG , there exists some LCFRS with and such that . 
	</s>
	

	<s id="152">
		 Outline of the proof . 
	</s>
	

	<s id="153">
		 We set , where , is the set of all indexes appearing in the productions of , and is constructed as follows . 
	</s>
	

	<s id="154">
		 Let with , , , and .Assume that can rewrite the right- hand side of , that is , Then there must be at least one index such that for each , contains exactly occurrences of . 
	</s>
	

	<s id="155">
		 Combining Lemmas 1 and 2 , we have Theorem 2 For any -GMTG , there exists some LCFRS with and such that . 
	</s>
	

	<s id="156">
		 Theorem 1 For any LCFRS , there exists some 1-GMTG with and such that . 
	</s>
	

	<s id="157">
		 5 Weak Language Preservation Property GMTGs have the weak language preservation property , which is one of the defining requirements of synchronous rewriting systems 
		<ref citStr="Rambow and Satta , 1996" id="18" label="CEPF" position="19855">
			( Rambow and Satta , 1996 )
		</ref>
		 . 
	</s>
	

	<s id="158">
		 Informally stated , the generative capacity of the class of all component grammars of a GMTG exactly corresponds to the class of all projected languages . 
	</s>
	

	<s id="159">
		 In other words , the interaction among different grammar components in the rewriting process of GMTG does not increase the generative power beyond the above mentioned class . 
	</s>
	

	<s id="160">
		 The next result states this property more formally . 
	</s>
	

	<s id="161">
		 Let be a -GMTG with production set . 
	</s>
	

	<s id="162">
		 For , the -th component gram- mar of , written , is the 1-GMTG with productions projected language of is , because component grammars interact with each other in the rewriting process of . 
	</s>
	

	<s id="163">
		 To give a simple example , consider the 2- GMTG with productions , and . 
	</s>
	

	<s id="164">
		 Then , and thus . 
	</s>
	

	<s id="165">
		 On the other hand , . 
	</s>
	

	<s id="166">
		 Let LCFRS be the class of all lan- guages generated by LCFRSs . 
	</s>
	

	<s id="167">
		 Also let and be the classes of languages and , respectively , for every , ev- ery -GMTG and every with Proof . 
	</s>
	

	<s id="168">
		 The cases directly follow from Theo- rem 1 . 
	</s>
	

	<s id="169">
		 Let be some -GMTG and let be an integer such that . 
	</s>
	

	<s id="170">
		 It is not difficult to see that . 
	</s>
	

	<s id="171">
		 Hence can be generated by some LCFRS , by Theorem 2 . 
	</s>
	

	<s id="172">
		 We now define a LCFRS such that . 
	</s>
	

	<s id="173">
		 Assume is a properly synchronous -GMTG generating ( Lemma 2 ) . 
	</s>
	

	<s id="174">
		 Let , where and are constructed from almost as in the proof of Lemma 1 . 
	</s>
	

	<s id="175">
		 The only difference is in the definition of strings and the production rewriting , specified as follows ( we use the same notation as in the proof of Lemma 1 ). , where for each : ( i ) if and ; ( ii ) if and ; ( iii ) if , with , as in the original proof . 
	</s>
	

	<s id="176">
		 Finally , the production rewriting has the form , where . 
	</s>
	

	<s id="177">
		 To conclude the proof , note that and can differ only with respect to string . 
	</s>
	

	<s id="178">
		 The theorem then follows from the fact that LCFRS is closed under intersection with regular languages 
		<ref citStr="Weir , 1988" id="19" label="CEPF" position="21812">
			( Weir , 1988 )
		</ref>
		 . 
	</s>
	

	<s id="179">
		 6 Generalized Chomsky Normal Form Certain kinds of text analysis require a grammar in a convenient normal form . 
	</s>
	

	<s id="180">
		 The prototypical example for CFG is Chomsky Normal Form ( CNF ) , which is required for CKY-style parsing . 
	</s>
	

	<s id="181">
		 A -GMTG is in Generalized Chomsky Normal Form ( GCNF ) if it has no useless links or useless terminals , and every production is in one of two forms : ( i ) A nonterminal production has rank = 2 and no terminals or ’s on the RHS . 
	</s>
	

	<s id="182">
		 ( ii ) A terminal production has exactly one component of the form , where and . 
	</s>
	

	<s id="183">
		 The other components are inactive . 
	</s>
	

	<s id="184">
		 The algorithm to convert a GMTG to GCNF has the following steps : ( 1 ) add a new start-symbol ( 2 ) isolate terminals , ( 3 ) binarize productions , ( 4 ) remove ’s , ( 5 ) eliminate useless links and terminals , and ( 6 ) eliminate unit productions . 
	</s>
	

	<s id="185">
		 The steps are generalizations of those presented by 
		<ref citStr="Hopcroft et al . ( 2001 )" id="20" label="CERF" position="22779">
			Hopcroft et al . ( 2001 )
		</ref>
		 to the multidimensional case with discontinuities . 
	</s>
	

	<s id="186">
		 The ordering of these steps is important , as some steps can restore conditions that others eliminate . 
	</s>
	

	<s id="187">
		 Traditionally , the terminal isolation and binarization steps came last , but the alternative order reduces the number of productions that can be created during -elimination . 
	</s>
	

	<s id="188">
		 Steps ( 1 ) , ( 2 ) , ( 5 ) and ( 6 ) are the same for CFG and GMTG , except that the notion of nonterminal in CFG is replaced with links in GMTG . 
	</s>
	

	<s id="189">
		 Some complications arise , however , in the generalization of steps ( 3 ) and ( 4 ) . 
	</s>
	

	<s id="190">
		 6.1 Step 3 : Binarize The third step of converting to GCNF is binarization of the productions , making the rank of the grammar two . 
	</s>
	

	<s id="191">
		 For and , we write D-GMTG to represent the class of all -GMTGs with rank and fan-out . 
	</s>
	

	<s id="192">
		 A CFG can always be binarized into another CFG : two adjacent nonterminals are replaced with a single nonterminal that yields them . 
	</s>
	

	<s id="193">
		 In con- trast , it can be impossible to binarize a -GMTG ~into an equivalent -GMTG . 
	</s>
	

	<s id="194">
		 From results pre- sented by 
		<ref citStr="Rambow and Satta ( 1999 )" id="21" label="CEPF" position="23918">
			Rambow and Satta ( 1999 )
		</ref>
		 it follows that , Similarly , the -th. Theorem 3 and . 
	</s>
	

	<s id="195">
		 . 
	</s>
	

	<s id="196">
		 In general . 
	</s>
	

	<s id="197">
		 ( S ) ( S ) NPat Vwent Phome Aearly PdamoyNPatArano Vpashol Pat went home early damoy Pat rano pashol Figure 1 : A production that requires an increased fan-out to binarize , and its 2D illustration . 
	</s>
	

	<s id="198">
		 for every fan-out and rank , there are some index orderings that can be generated by ~-GMTG but not -GMTG . 
	</s>
	

	<s id="199">
		 The distin- guishing characteristic of such index orderings is apparent in Figure 1 , which shows a production in a grammar with fan-out two , and a graph that illustrates which nonterminals are coindexed . 
	</s>
	

	<s id="200">
		 No two nonterminals are adjacent in both components , so replacing any two nonterminals with a single non- terminal causes a discontinuity . 
	</s>
	

	<s id="201">
		 Increasing the fan- out of the grammar allows a single nonterminal to rewrite as non-adjacent nonterminals in the same string . 
	</s>
	

	<s id="202">
		 Increasing the fan-out can be necessary even for binarizing a 1-GMTG production such as : To binarize , we nondeterministically split each nonterminal production of rank into two nonterminal productions and of rank , but possibly with higher fan-out . 
	</s>
	

	<s id="203">
		 Since this algorithm replaces with two productions that have rank , recursively applying the algorithm to productions of rank greater than two will reduce the rank of the grammar to two . 
	</s>
	

	<s id="204">
		 The algorithm follows : ( i ) Nondeterministically chose links to be removed from and replaced with a single link to make , where . 
	</s>
	

	<s id="205">
		 We call these links the m-links . 
	</s>
	

	<s id="206">
		 ( ii ) Create a new ITV . 
	</s>
	

	<s id="207">
		 Two nonterminals are neighbors if they are adjacent in the same string in a production RHS . 
	</s>
	

	<s id="208">
		 For each set of m- link neighbors in component in , place that set of neighbors into the ’th component of in the order in which they appeared in , so that each set of neighbors becomes a different string , for ( iii ) Create a new unique nonterminal , say , and replace each set of neighbors in production with , to create . 
	</s>
	

	<s id="209">
		 The production is For example , binarization of the productions for the English/Russian multitext [ ( Pat went home early ) , ( damoy Pat rano pashol)]6 in Figure 1 requires that we increase the fan-out of the language to three . 
	</s>
	

	<s id="210">
		 The binarized productions are as follows : Pdamoy V^pashol 6.2 Step 4 : Eliminate ’s Grammars in GCNF cannot have ’s in their productions . 
	</s>
	

	<s id="211">
		 Thus , GCNF is a more restrictive normal form than those used by 
		<ref citStr="Wu ( 1997 )" id="22" label="CJPF" position="26426">
			Wu ( 1997 )
		</ref>
		 and 
		<ref citStr="Melamed ( 2003 )" id="23" label="CJPF" position="26447">
			Melamed ( 2003 )
		</ref>
		 . 
	</s>
	

	<s id="212">
		 The absence of ’s simplifies parsers for GMTG 
		<ref citStr="Melamed , 2004" id="24" label="CEPF" position="26524">
			( Melamed , 2004 )
		</ref>
		 . 
	</s>
	

	<s id="213">
		 Given a GMTG with in some productions , we give the construction of a weakly equivalent grammar without any ’s . 
	</s>
	

	<s id="214">
		 First , determine all nullable links and associated strings in . 
	</s>
	

	<s id="215">
		 A link is nullable if , where is an ITV where at least one is . 
	</s>
	

	<s id="216">
		 We say the link is nullable and the string at address in is nullable . 
	</s>
	

	<s id="217">
		 For each nullable link , we create versions of the link , where is the number of nullable strings of that link . 
	</s>
	

	<s id="218">
		 There is one version for each of the possible combinations of the nullable strings being present or absent . 
	</s>
	

	<s id="219">
		 The version of the link with all strings present is its original version . 
	</s>
	

	<s id="220">
		 Each non-original version of the link ( except in the case of start links ) gets a unique subscript , which is applied to all the nonterminals in the link , so that each link is unique in the grammar . 
	</s>
	

	<s id="221">
		 We construct a new grammar whose set of productions is determined as follows : for each production , we identify the nullable links on the RHS and replace them with each combination of the non-original versions found earlier . 
	</s>
	

	<s id="222">
		 If a string is left empty during this process , that string is removed from the RHS and the fan-out of the production component is reduced by one . 
	</s>
	

	<s id="223">
		 The link on the LHS is replaced with its appropriate matching non-original link . 
	</s>
	

	<s id="224">
		 There is one exception to the replacements . 
	</s>
	

	<s id="225">
		 If a production consists of all nullable strings , do not include this case . 
	</s>
	

	<s id="226">
		 Lastly , we remove all strings on the RHS of productions that have ’s , and reduce the fan-out of the productions accordingly . 
	</s>
	

	<s id="227">
		 Once 6The Russian is topicalized but grammatically correct . 
	</s>
	

	<s id="228">
		 S,S NVPA PNAV ( 25 ) . 
	</s>
	

	<s id="229">
		 S S VP VP VP V VV NPatVP ( 26 ) VP NPat VP V Aearly ( 27 ) V Arano V VwentPhome ( 28 ) again , we replace the LHS link with the appropriate version . 
	</s>
	

	<s id="230">
		 Consider the example grammar : ( 29 ) ( 30 ) ( 31 ) ( 32 ) We first identify which links are nullable . 
	</s>
	

	<s id="231">
		 In this case and are nullable so we create a new version of both links : and . 
	</s>
	

	<s id="232">
		 We then alter the productions . 
	</s>
	

	<s id="233">
		 Production ( 31 ) gets replaced by ( 40 ) . 
	</s>
	

	<s id="234">
		 A new production based on ( 30 ) is Production ( 38 ) . 
	</s>
	

	<s id="235">
		 Lastly , Production ( 29 ) has two nullable strings on the RHS , so it gets altered to add three new productions , ( 34 ) , ( 35 ) and ( 36 ) . 
	</s>
	

	<s id="236">
		 The altered set of productions are the following : ( 33 ) ( 34 ) ( 35 ) ( 36 ) ( 37 ) ( 38 ) ( 39 ) ( 40 ) 
		<ref citStr="Melamed et al . ( 2004 )" id="25" label="CEPF" position="29089">
			Melamed et al . ( 2004 )
		</ref>
		 give more details about conversion to GCNF , as well as the full proof of our final theorem : Theorem 4 For each GMTG there exists a GMTG in GCNFgenerating the same set of multitexts as but with each component in a multi- text replaced by . 
	</s>
	

	<s id="237">
		 7 Conclusions Generalized Multitext Grammar is a convenient and intuitive model of parallel text . 
	</s>
	

	<s id="238">
		 In this paper , we have presented some formal properties of GMTG , including proofs that the generative capacity of GMTG is comparable to ordinary LCFRS , and that GMTG has the weak language preservation property . 
	</s>
	

	<s id="239">
		 We also proposed a synchronous generalization of Chomsky Normal Form , laying the foundation for synchronous CKY parsing under GMTG . 
	</s>
	

	<s id="240">
		 In future work , we shall explore the empirical properties of GMTG , by inducing stochastic GMTGs from real multitexts . 
	</s>
	

	<s id="241">
		 Acknowledgments Thanks to Owen Rambow and the anonymous reviewers for valuable feedback . 
	</s>
	

	<s id="242">
		 This research was supported by an NSF CAREER Award , the DARPA TIDES program , the Italian MIUR under project PRIN No. 2003091149 005 , and an equipment gift from Sun Microsystems . 
	</s>
	

	<s id="243">
		 References A. Aho and J. Ullman . 
	</s>
	

	<s id="244">
		 1969. Syntax directed translations and the pushdown assembler . 
	</s>
	

	<s id="245">
		 Journal of Computer and System Sciences , 3:37–56 , February . 
	</s>
	

	<s id="246">
		 T. Becker , A. Joshi , and O. Rambow . 
	</s>
	

	<s id="247">
		 1991 . 
	</s>
	

	<s id="248">
		 Long-distance scrambling and tree adjoining grammars . 
	</s>
	

	<s id="249">
		 In Proceedings of the 5th Meeting of the European Chapter of the Association for Computational Linguistics ( EACL ) , Berlin , Germany . 
	</s>
	

	<s id="250">
		 E. Bertsch and M. J. Nederhof . 
	</s>
	

	<s id="251">
		 2001. On the complexity of some extensions of RCG parsing . 
	</s>
	

	<s id="252">
		 In Proceedings of the 7th International Workshop on Parsing Technologies ( IWPT ) , pages 66–77 , Beijing , China . 
	</s>
	

	<s id="253">
		 M. Dras and T. Bleam . 
	</s>
	

	<s id="254">
		 2000. How problematic are clitics for S-TAG translation ? 
	</s>
	

	<s id="255">
		 In Proceedings of the 5th International Workshop on Tree Adjoining Grammars and Related For- malisms ( TAG+5 ) , Paris , France . 
	</s>
	

	<s id="256">
		 J. Hopcroft , R. Motwani , and J. Ullman . 
	</s>
	

	<s id="257">
		 2001. Introduction to Automota Theory , Languages and Computation . 
	</s>
	

	<s id="258">
		 Addison- Wesley , USA . 
	</s>
	

	<s id="259">
		 I. Dan Melamed , G. Satta , and B. Wellington . 
	</s>
	

	<s id="260">
		 2004. Generalized multitext grammars . 
	</s>
	

	<s id="261">
		 Technical Report 04-003 , NYU Proteus Project . 
	</s>
	

	<s id="262">
		 http://nlp.cs.nyu.edu/pubs/ . 
	</s>
	

	<s id="263">
		 I. Dan Melamed . 
	</s>
	

	<s id="264">
		 2003. Multitext grammars and synchronous parsers . 
	</s>
	

	<s id="265">
		 In Proceedings ofthe Human Language Technology Conference and the North American Association for Computational Linguistics ( HLT-NAACL ) , pages 158–165 , Edmonton , Canada . 
	</s>
	

	<s id="266">
		 I. Dan Melamed . 
	</s>
	

	<s id="267">
		 2004. Statistical machine translation by parsing . 
	</s>
	

	<s id="268">
		 In Proceedings of the 42nd Annual Meeting of the Association for Computational Linguistics ( ACL ) , Barcelona , Spain . 
	</s>
	

	<s id="269">
		 O. Rambow and G. Satta . 
	</s>
	

	<s id="270">
		 1996. Synchronous models of language . 
	</s>
	

	<s id="271">
		 In Proceedings ofthe 34th Annual Meeting ofthe Association for Computational Linguistics ( ACL ) , Santa Cruz , USA . 
	</s>
	

	<s id="272">
		 O. Rambow and G. Satta . 
	</s>
	

	<s id="273">
		 1999. Independent parallelism in finite copying parallel rewriting systems . 
	</s>
	

	<s id="274">
		 Theoretical Computer Science , 223:87–120 , July . 
	</s>
	

	<s id="275">
		 O. Rambow . 
	</s>
	

	<s id="276">
		 1995. Formal and Computational Aspects ofNatural Language Syntax . 
	</s>
	

	<s id="277">
		 Ph.D . 
	</s>
	

	<s id="278">
		 thesis , University of Pennsylvania , Philadelphia , PA . 
	</s>
	

	<s id="279">
		 S. Shieber . 
	</s>
	

	<s id="280">
		 1994. Restricting the weak-generative capactiy of synchronous tree-adjoining grammars . 
	</s>
	

	<s id="281">
		 Computational Intelligence , 10(4):371–386 . 
	</s>
	

	<s id="282">
		 D. J. Weir . 
	</s>
	

	<s id="283">
		 1988 . 
	</s>
	

	<s id="284">
		 Characterizing Mildly Context-Sensitive Grammar Formalisms . 
	</s>
	

	<s id="285">
		 Ph.D . 
	</s>
	

	<s id="286">
		 thesis , Department of Computer and Information Science , University of Pennsylvania . 
	</s>
	

	<s id="287">
		 D. Wu . 
	</s>
	

	<s id="288">
		 1997. Stochastic inversion transduction grammars and bilingual parsing of parallel corpora . 
	</s>
	

	<s id="289">
		 Computational Linguistics , 23(3):377–404 , September . 
	</s>
	

	<s id="290">
		 D. H. . 
	</s>
	

	<s id="291">
		 Younger . 
	</s>
	

	<s id="292">
		 1967. Recognition and parsing of context-free languages in time . 
	</s>
	

	<s id="293">
		 Information and Control , 10(2):189– 208 , February . 
	</s>
	


</acldoc>
